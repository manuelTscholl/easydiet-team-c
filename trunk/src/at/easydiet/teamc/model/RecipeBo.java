package at.easydiet.teamc.model;
// Generated 02.04.2011 00:41:04 by Hibernate Tools 3.4.0.CR1


import at.easydiet.teamc.model.data.NutrimentParameterData;
import java.sql.Clob;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import at.easydiet.model.NutrimentParameter;
import at.easydiet.model.Recipe;
import at.easydiet.model.RecipeIngredient;
import at.easydiet.teamc.model.data.RecipeData;
import at.easydiet.teamc.model.data.RecipeIngredientData;
import java.util.ArrayList;



/**
 * RecipeBo generated by hbm2java
 */
public class RecipeBo  implements java.io.Serializable, Saveable, RecipeData {

     private Recipe _Recipe;

    private RecipeBo() {
    }

    public RecipeBo(Recipe recipe){
        this._Recipe=recipe;
    }

	
    public RecipeBo(Recipe recipe, String name, int difficulty) {
        this(recipe);
        this._Recipe.setName(name);
        this._Recipe.setDifficulty(difficulty);
    }
    public RecipeBo(Recipe recipe, String name, String blsCode, int difficulty, Clob description, Clob benefits, Clob cookInstructions, Set<RecipeIngredientBo> recipesIngredientsBo, Set<NutrimentParameterBo> nutrimentParametersBo) {
       this(recipe, name, difficulty);
       this._Recipe.setBlsCode(blsCode);
       this._Recipe.setDescription(description);
       this._Recipe.setBenefits(benefits);
       this._Recipe.setCookInstructions(cookInstructions);
       for(RecipeIngredientBo recipeIngredientBo:recipesIngredientsBo){
           this._Recipe.getIngredients().add(recipeIngredientBo.getRecipeIngredient());
       }

        for (NutrimentParameterBo nutrimentParameterBo : nutrimentParametersBo) {
            this._Recipe.getNutrimentParameters().add(nutrimentParameterBo.getNutrimentParameter());
        }

    }

    /**
     * Calculates the values for all nutriment parameter.
     */
    public void calculateNutrimentParameter(){
        throw new UnsupportedOperationException("Not supported yet.");
    }
   
    public long getRecipeId() {
        return this.getRecipe().getRecipeId();
    }
    
    public void setRecipeId(long recipeId) {
        this.getRecipe().setRecipeId(recipeId);
    }
    public String getName() {
        return this.getRecipe().getName();
    }
    
    public void setName(String name) {
        this.getRecipe().setName(name);
    }
    public String getBlsCode() {
        return this.getRecipe().getBlsCode();
    }
    
    public void setBlsCode(String blsCode) {
        this.getRecipe().setBlsCode(blsCode);
    }
    public int getDifficulty() {
        return this.getRecipe().getDifficulty();
    }
    
    public void setDifficulty(int difficulty) {
        this.getRecipe().setDifficulty(difficulty);
    }
    public Clob getDescription() {
        return this.getRecipe().getDescription();
    }
    
    public void setDescription(Clob description) {
        this.getRecipe().setDescription(description);
    }
    public Clob getBenefits() {
        return this.getRecipe().getBenefits();
    }
    
    public void setBenefits(Clob benefits) {
        this.getRecipe().setBenefits(benefits);
    }
    public Clob getCookInstructions() {
        return this.getRecipe().getCookInstructions();
    }
    
    public void setCookInstructions(Clob cookInstructions) {
        this.getRecipe().setCookInstructions(cookInstructions);
    }
    public Set<RecipeIngredientBo> getRecipeIngredientsBo() {
        Set<RecipeIngredientBo> temp = new HashSet<RecipeIngredientBo>(this._Recipe.getIngredients().size());
        for (RecipeIngredient recipeIngredient : this._Recipe.getIngredients()) {
            temp.add(new RecipeIngredientBo(recipeIngredient));
        }
        return temp;
    }
    
    public void setRecipeIngredientsBo(Set<RecipeIngredientBo> recipesIngredientsBo) {
        for(RecipeIngredientBo recipeIngredientBo:recipesIngredientsBo){
           this._Recipe.getIngredients().add(recipeIngredientBo.getRecipeIngredient());
       }
    }
    public Set<NutrimentParameterBo> getNutrimentParameters() {
        Set<NutrimentParameterBo> temp = new HashSet<NutrimentParameterBo>(this._Recipe.getNutrimentParameters().size());
        for (NutrimentParameter nutrimentParameter : this._Recipe.getNutrimentParameters()) {
            temp.add(new NutrimentParameterBo(nutrimentParameter));
        }
        return temp;
    }
    
    public void setNutrimentParameters(Set<NutrimentParameterBo> nutrimentParametersBo) {
        for (NutrimentParameterBo nutrimentParameterBo : nutrimentParametersBo) {
            this._Recipe.getNutrimentParameters().add(nutrimentParameterBo.getNutrimentParameter());
        }
    }

    /**
     * @return the _Recipe
     */
    protected Recipe getRecipe() {
        return _Recipe;
    }

    /**
     * @param Recipe the _Recipe to set
     */
    public void setRecipe(Recipe Recipe) {
        this._Recipe = Recipe;
    }

    @Override
    public boolean save() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    protected double getNutrimentParameterValue(NutrimentParameterBo npb){
        for(NutrimentParameterBo nutrimentParameterBo: this.getNutrimentParameters()){
            if(nutrimentParameterBo.getParameterDefinition().getName().equals(npb.getParameterDefinition().getName())){
                return Double.parseDouble(nutrimentParameterBo.getValue());
            }
        }
        return 0;
    }

    public String toString(){
        return _Recipe.getName();
    }

    public List<RecipeIngredientData> getRecipeIngredientsData() {
        List<RecipeIngredientData> temp = new ArrayList<RecipeIngredientData>(this.getRecipeIngredientsBo().size());

        if(this.getRecipeIngredientsBo().size()<=0){
            temp.add((RecipeIngredientData) this);
            return temp;
        }

        for (RecipeIngredientBo rib: this.getRecipeIngredientsBo()) {
            temp.add((RecipeIngredientData) rib.getIngredient());
        }

        return temp;
    }

    public List<NutrimentParameterData> getNutrimentParametersData() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public float getTotalAmount() {
        return this._Recipe.getAmount();
    }
    
    public void calcParameters()
    {
        for (RecipeIngredientBo recipeIngredient : getRecipeIngredientsBo())
        {
            //FIXME: muss implementiert werden
        }
    }
    public void addRecipeIngredient(RecipeData d){
    	d.getRecipeIngredientsData().add((RecipeIngredientData)d);
    }

}


